{
	"info": {
		"_postman_id": "ccac765f-bcba-48f1-a24c-684c872885dc",
		"name": "APE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27393645",
		"_collection_link": "https://warped-moon-834208.postman.co/workspace/TrelloAPI-KT~c613544d-0f2b-4ef2-983b-5cdef325701c/collection/27393645-ccac765f-bcba-48f1-a24c-684c872885dc?action=share&source=collection_link&creator=27393645"
	},
	"item": [
		{
			"name": "Create token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica si la respuesta es exitosa\r",
							"if (pm.response.code === 200) {\r",
							"    // Extrae el token del cuerpo de la respuesta\r",
							"    const token = pm.response.json().token;\r",
							"    \r",
							"    // Guarda el token en una variable de entorno o colección\r",
							"    pm.environment.set(\"auth_token\", token); // Para variable de entorno\r",
							"    // pm.collectionVariables.set(\"auth_token\", token); // Para variable de colección\r",
							"    \r",
							"    // Opcional: Muestra un mensaje en la consola para confirmar\r",
							"    console.log(\"Token guardado:\", token);\r",
							"} else {\r",
							"    console.log(\"Error: No se pudo obtener el token.\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{dom}}/auth",
					"host": [
						"{{dom}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingIds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica si la respuesta es exitosa\r",
							"if (pm.response.code === 200) {\r",
							"    // Obtén la lista de bookingids\r",
							"    const bookings = pm.response.json();\r",
							"    \r",
							"    // Verifica si hay bookingids disponibles\r",
							"    if (bookings.length > 0) {\r",
							"        // Genera un índice aleatorio dentro del rango de la lista\r",
							"        const randomIndex = require('lodash').random(0, bookings.length - 1);\r",
							"        \r",
							"        // Selecciona el bookingid en la posición aleatoria\r",
							"        const bookingid = bookings[randomIndex].bookingid;\r",
							"        \r",
							"        // Guarda el bookingid en una variable de entorno o colección\r",
							"        pm.environment.set(\"bookingid\", bookingid); // Para variable de entorno\r",
							"        // pm.collectionVariables.set(\"bookingid\", bookingid); // Para variable de colección\r",
							"        \r",
							"        // Opcional: Muestra un mensaje en la consola para confirmar\r",
							"        console.log(\"Booking ID guardado (índice aleatorio):\", bookingid);\r",
							"    } else {\r",
							"        console.log(\"Error: No hay bookingids disponibles en la respuesta.\");\r",
							"    }\r",
							"} else {\r",
							"    console.log(\"Error: No se pudo obtener la lista de bookingids.\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{dom}}/booking",
					"host": [
						"{{dom}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const bookingid = pm.environment.get(\"bookingid\");\r",
							"if (!bookingid) {\r",
							"    throw new Error(\"Booking ID no está definido. Ejecuta primero GetBookingIds.\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica si la respuesta es exitosa\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verifica que la respuesta contiene los campos esperados\r",
							"pm.test(\"Response contains expected fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"firstname\");\r",
							"    pm.expect(response).to.have.property(\"lastname\");\r",
							"    pm.expect(response).to.have.property(\"totalprice\");\r",
							"    pm.expect(response).to.have.property(\"depositpaid\");\r",
							"    pm.expect(response).to.have.property(\"bookingdates\");\r",
							"    pm.expect(response.bookingdates).to.have.property(\"checkin\");\r",
							"    pm.expect(response.bookingdates).to.have.property(\"checkout\");\r",
							"    pm.expect(response).to.have.property(\"additionalneeds\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{dom}}/booking/{{new_bookingid}}",
					"host": [
						"{{dom}}"
					],
					"path": [
						"booking",
						"{{new_bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Booking - CreateBooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains bookingid and booking details\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"bookingid\");\r",
							"    pm.expect(response).to.have.property(\"booking\");\r",
							"    pm.expect(response.booking).to.have.property(\"firstname\");\r",
							"    pm.expect(response.booking).to.have.property(\"lastname\");\r",
							"    pm.expect(response.booking).to.have.property(\"totalprice\");\r",
							"    pm.expect(response.booking).to.have.property(\"depositpaid\");\r",
							"    pm.expect(response.booking).to.have.property(\"bookingdates\");\r",
							"    pm.expect(response.booking.bookingdates).to.have.property(\"checkin\");\r",
							"    pm.expect(response.booking.bookingdates).to.have.property(\"checkout\");\r",
							"    pm.expect(response.booking).to.have.property(\"additionalneeds\");\r",
							"});\r",
							"// Verifica si la respuesta es exitosa\r",
							"if (pm.response.code === 200) {\r",
							"    // Extrae el cuerpo de la respuesta\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Guarda el bookingid en una variable de entorno o colección\r",
							"    pm.environment.set(\"new_bookingid\", response.bookingid); // Para variable de entorno\r",
							"    // pm.collectionVariables.set(\"new_bookingid\", response.bookingid); // Para variable de colección\r",
							"    \r",
							"    // Opcional: Muestra un mensaje en la consola para confirmar\r",
							"    console.log(\"New Booking ID:\", response.bookingid);\r",
							"} else {\r",
							"    console.log(\"Error: No se pudo crear la reserva.\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Jim\",\r\n    \"lastname\": \"Brown\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{dom}}/booking",
					"host": [
						"{{dom}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Booking - UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.bookingId).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.bookingDetails).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema of the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('bookingId');\r",
							"    pm.expect(responseData.bookingId).to.be.a('number');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData.status).to.be.a('string');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData.message).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Booking object is present and contains expected properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.booking).to.exist;\r",
							"    pm.expect(responseData.booking).to.have.property('id');\r",
							"    pm.expect(responseData.booking).to.have.property('date');\r",
							"    pm.expect(responseData.booking).to.have.property('customer');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"JimUPDATE3\",\r\n    \"lastname\": \"BrownPDATE3\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{dom}}/booking/{{new_bookingid}}",
					"host": [
						"{{dom}}"
					],
					"path": [
						"booking",
						"{{new_bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Booking - PartialUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('bookingId');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData).to.have.property('date');\r",
							"    pm.expect(responseData).to.have.property('customerName');\r",
							"    pm.expect(responseData).to.have.property('roomId');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('bookingId');\r",
							"    pm.expect(responseData.bookingId).to.be.a('number');\r",
							"\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData.status).to.be.a('string');\r",
							"\r",
							"    pm.expect(responseData).to.have.property('confirmationNumber');\r",
							"    pm.expect(responseData.confirmationNumber).to.be.a('string');\r",
							"\r",
							"    pm.expect(responseData).to.have.property('startDate');\r",
							"    pm.expect(responseData.startDate).to.match(/\\d{4}-\\d{2}-\\d{2}/);\r",
							"\r",
							"    pm.expect(responseData).to.have.property('endDate');\r",
							"    pm.expect(responseData.endDate).to.match(/\\d{4}-\\d{2}-\\d{2}/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the content of the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('booking_id');\r",
							"    pm.expect(responseData.booking_id).to.be.a('number');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData.status).to.be.a('string');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData.message).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Nombre Patch\",\r\n    \"lastname\": \"Ape Patch\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{dom}}/booking/{{new_bookingid}}",
					"host": [
						"{{dom}}"
					],
					"path": [
						"booking",
						"{{new_bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Booking - DeleteBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema is as expected\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData.status).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response body is empty after the DELETE request\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{dom}}/booking/{{new_bookingid}}",
					"host": [
						"{{dom}}"
					],
					"path": [
						"booking",
						"{{new_bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ping - HealthCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the Content-Type header set to 'text/plain'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains the expected message 'Created'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate response schema for the expected fields and data types\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{dom}}/ping",
					"host": [
						"{{dom}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	]
}